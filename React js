import { Component } from 'react';
import './App.css';

class App extends Component {
  constructor() {
    super();
    this.state = {
      monsters: [], // The original list of monsters
      searchField: '' // The search input value
    };
  }

  componentDidMount() {
    fetch('https://jsonplaceholder.typicode.com/users')
      .then((response) => response.json())
      .then((users) =>
        this.setState(() => {
          return { monsters: users }; // Store the original list of monsters
        })
      )
      .catch((error) => console.log(error));
  }

  render() {
    const { monsters, searchField } = this.state;

    // Filter the monsters based on the search input
    const filteredMonsters = monsters.filter((monster) =>
      monster.name.toLowerCase().includes(searchField.toLowerCase())
    );

    return (
      <div className="App">
        <input
          className="Search-Monsters"
          placeholder="Search for monster"
          onChange={(event) => {
            const searchField = event.target.value; // Update the search input value
            this.setState({ searchField });
          }}
        />
        {filteredMonsters.map((monster) => {
          return (
            <div key={monster.id}>
              <h1>{monster.name}</h1>
            </div>
          );
        })}
      </div>
    );
  }
}

export default App;









import { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {
  constructor(){
    super();
    this.state = {
      monsters: [ ],
    }
  
  }
  
componentDidMount(){
  fetch('https://jsonplaceholder.typicode.com/users')
  .then(response=>response.json())
    .then(users=>
      this.setState(()=>{
        return {monsters:users}
      },()=>{
        console.log(this.state);
      })
    )
   .catch(error=>console.log(error));
   
}

  render(){
    return ( 
      <div className="App">
     
        <input className="Search-Monsters" placeholder='Search for monster' onChange={
          (event) => {  
            const filteredList = this.state.monsters.filter(monster => 
              monster.name.toLowerCase().includes(event.target.value.toLowerCase()) // Fixed case-insensitive search and corrected `this.state.monsters`
            );
            this.setState({ monsters: filteredList }); // Fixed `this.setState` syntax
          }
        } />
        {
          this.state.monsters.map((monster) => {
            return <div key={monster.id}> <h1>{monster.name}</h1> </div>
          })
        }
      </div>
    );
  }
}
export default App;
